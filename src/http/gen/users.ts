/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../customInstance";

import { customInstance } from "../customInstance";
import type {
	ApiError,
	BodyLoginUsersLoginPost,
	ListUsersParams,
	Message,
	PageUserResponse,
	Token,
	UserCreate,
	UserResponse,
	UserUpdate,
} from "./api.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * OAuth2 compatible token login, get an access token for future requests.

Request Body (application/x-www-form-urlencoded):
- **username**: The user's email address.
- **password**: The user's password.
 * @summary Login
 */
export const login = (
	bodyLoginUsersLoginPost: BodyType<BodyLoginUsersLoginPost>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	const formUrlEncoded = new URLSearchParams();
	if (
		bodyLoginUsersLoginPost.grant_type !== undefined &&
		bodyLoginUsersLoginPost.grant_type !== null
	) {
		formUrlEncoded.append(`grant_type`, bodyLoginUsersLoginPost.grant_type);
	}
	formUrlEncoded.append(`username`, bodyLoginUsersLoginPost.username);
	formUrlEncoded.append(`password`, bodyLoginUsersLoginPost.password);
	if (bodyLoginUsersLoginPost.scope !== undefined) {
		formUrlEncoded.append(`scope`, bodyLoginUsersLoginPost.scope);
	}
	if (
		bodyLoginUsersLoginPost.client_id !== undefined &&
		bodyLoginUsersLoginPost.client_id !== null
	) {
		formUrlEncoded.append(`client_id`, bodyLoginUsersLoginPost.client_id);
	}
	if (
		bodyLoginUsersLoginPost.client_secret !== undefined &&
		bodyLoginUsersLoginPost.client_secret !== null
	) {
		formUrlEncoded.append(
			`client_secret`,
			bodyLoginUsersLoginPost.client_secret,
		);
	}

	return customInstance<Token>(
		{
			url: `/users/login`,
			method: "POST",
			headers: { "Content-Type": "application/x-www-form-urlencoded" },
			data: formUrlEncoded,
			signal,
		},
		options,
	);
};

export const getLoginMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: BodyType<BodyLoginUsersLoginPost> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: BodyType<BodyLoginUsersLoginPost> },
	TContext
> => {
	const mutationKey = ["login"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: BodyType<BodyLoginUsersLoginPost> }
	> = (props) => {
		const { data } = props ?? {};

		return login(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
	Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = BodyType<BodyLoginUsersLoginPost>;
export type LoginMutationError = ErrorType<ApiError>;

/**
 * @summary Login
 */
export const useLogin = <TError = ErrorType<ApiError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof login>>,
			TError,
			{ data: BodyType<BodyLoginUsersLoginPost> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: BodyType<BodyLoginUsersLoginPost> },
	TContext
> => {
	const mutationOptions = getLoginMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get current authenticated user.
 * @summary Get Current User
 */
export const getCurrentUser = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{ url: `/users/me`, method: "POST", signal },
		options,
	);
};

export const getGetCurrentUserMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof getCurrentUser>>,
		TError,
		void,
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof getCurrentUser>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["getCurrentUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof getCurrentUser>>,
		void
	> = () => {
		return getCurrentUser(requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type GetCurrentUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof getCurrentUser>>
>;

export type GetCurrentUserMutationError = ErrorType<ApiError>;

/**
 * @summary Get Current User
 */
export const useGetCurrentUser = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof getCurrentUser>>,
			TError,
			void,
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof getCurrentUser>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getGetCurrentUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Create new user
 * @summary Create New User
 */
export const createNewUser = (
	userCreate: BodyType<UserCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{
			url: `/users/`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: userCreate,
			signal,
		},
		options,
	);
};

export const getCreateNewUserMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createNewUser>>,
		TError,
		{ data: BodyType<UserCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createNewUser>>,
	TError,
	{ data: BodyType<UserCreate> },
	TContext
> => {
	const mutationKey = ["createNewUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createNewUser>>,
		{ data: BodyType<UserCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createNewUser(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateNewUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof createNewUser>>
>;
export type CreateNewUserMutationBody = BodyType<UserCreate>;
export type CreateNewUserMutationError = ErrorType<ApiError>;

/**
 * @summary Create New User
 */
export const useCreateNewUser = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createNewUser>>,
			TError,
			{ data: BodyType<UserCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createNewUser>>,
	TError,
	{ data: BodyType<UserCreate> },
	TContext
> => {
	const mutationOptions = getCreateNewUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get a list with all users.
 * @summary List Users
 */
export const listUsers = (
	params?: ListUsersParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PageUserResponse>(
		{ url: `/users/`, method: "GET", params, signal },
		options,
	);
};

export const getListUsersQueryKey = (params?: ListUsersParams) => {
	return [`/users/`, ...(params ? [params] : [])] as const;
};

export const getListUsersQueryOptions = <
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
		signal,
	}) => listUsers(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listUsers>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersQueryResult = NonNullable<
	Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = ErrorType<ApiError>;

export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiError>,
>(
	params: undefined | ListUsersParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listUsers>>,
					TError,
					Awaited<ReturnType<typeof listUsers>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Users
 */

export function useListUsers<
	TData = Awaited<ReturnType<typeof listUsers>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListUsersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListUsersQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Get user by id
 * @summary Get User
 */
export const getUser = (
	userId: number,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserResponse>(
		{ url: `/users/${userId}`, method: "GET", signal },
		options,
	);
};

export const getGetUserQueryKey = (userId?: number) => {
	return [`/users/${userId}`] as const;
};

export const getGetUserQueryOptions = <
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = ErrorType<ApiError>,
>(
	userId: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(userId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
		signal,
	}) => getUser(userId, requestOptions, signal);

	return {
		queryKey,
		queryFn,
		enabled: !!userId,
		...queryOptions,
	} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};
};

export type GetUserQueryResult = NonNullable<
	Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = ErrorType<ApiError>;

export function useGetUser<
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = ErrorType<ApiError>,
>(
	userId: number,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUser>>,
					TError,
					Awaited<ReturnType<typeof getUser>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = ErrorType<ApiError>,
>(
	userId: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getUser>>,
					TError,
					Awaited<ReturnType<typeof getUser>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = ErrorType<ApiError>,
>(
	userId: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get User
 */

export function useGetUser<
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = ErrorType<ApiError>,
>(
	userId: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetUserQueryOptions(userId, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a user
 * @summary Update User
 */
export const updateUser = (
	userId: number,
	userUpdate: BodyType<UserUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<UserResponse>(
		{
			url: `/users/${userId}`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: userUpdate,
		},
		options,
	);
};

export const getUpdateUserMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ userId: number; data: BodyType<UserUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ userId: number; data: BodyType<UserUpdate> },
	TContext
> => {
	const mutationKey = ["updateUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUser>>,
		{ userId: number; data: BodyType<UserUpdate> }
	> = (props) => {
		const { userId, data } = props ?? {};

		return updateUser(userId, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = BodyType<UserUpdate>;
export type UpdateUserMutationError = ErrorType<ApiError>;

/**
 * @summary Update User
 */
export const useUpdateUser = <TError = ErrorType<ApiError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateUser>>,
			TError,
			{ userId: number; data: BodyType<UserUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ userId: number; data: BodyType<UserUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a user.
 * @summary Delete User
 */
export const deleteUser = (
	userId: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<Message>(
		{ url: `/users/${userId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteUserMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteUser>>,
		TError,
		{ userId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ userId: number },
	TContext
> => {
	const mutationKey = ["deleteUser"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteUser>>,
		{ userId: number }
	> = (props) => {
		const { userId } = props ?? {};

		return deleteUser(userId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = ErrorType<ApiError>;

/**
 * @summary Delete User
 */
export const useDeleteUser = <TError = ErrorType<ApiError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteUser>>,
			TError,
			{ userId: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteUser>>,
	TError,
	{ userId: number },
	TContext
> => {
	const mutationOptions = getDeleteUserMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
