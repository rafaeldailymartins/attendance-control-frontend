/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../customInstance";

import { customInstance } from "../customInstance";
import type {
	AbsenceResponse,
	ApiError,
	AttendanceCreate,
	AttendanceResponse,
	AttendanceUpdate,
	ListAbsencesParams,
	ListAttendancesParams,
	Message,
	PageAttendanceResponse,
} from "./api.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create new attendance (Clock in or Clock out)
 * @summary Create New Attendance
 */
export const createNewAttendance = (
	attendanceCreate: BodyType<AttendanceCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AttendanceResponse>(
		{
			url: `/records/attendances`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: attendanceCreate,
			signal,
		},
		options,
	);
};

export const getCreateNewAttendanceMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createNewAttendance>>,
		TError,
		{ data: BodyType<AttendanceCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createNewAttendance>>,
	TError,
	{ data: BodyType<AttendanceCreate> },
	TContext
> => {
	const mutationKey = ["createNewAttendance"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createNewAttendance>>,
		{ data: BodyType<AttendanceCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createNewAttendance(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateNewAttendanceMutationResult = NonNullable<
	Awaited<ReturnType<typeof createNewAttendance>>
>;
export type CreateNewAttendanceMutationBody = BodyType<AttendanceCreate>;
export type CreateNewAttendanceMutationError = ErrorType<ApiError>;

/**
 * @summary Create New Attendance
 */
export const useCreateNewAttendance = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createNewAttendance>>,
			TError,
			{ data: BodyType<AttendanceCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createNewAttendance>>,
	TError,
	{ data: BodyType<AttendanceCreate> },
	TContext
> => {
	const mutationOptions = getCreateNewAttendanceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * List attendances.
Attendances of inactive users will not be shown.
 * @summary List Attendances
 */
export const listAttendances = (
	params?: ListAttendancesParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PageAttendanceResponse>(
		{ url: `/records/attendances`, method: "GET", params, signal },
		options,
	);
};

export const getListAttendancesQueryKey = (params?: ListAttendancesParams) => {
	return [`/records/attendances`, ...(params ? [params] : [])] as const;
};

export const getListAttendancesQueryOptions = <
	TData = Awaited<ReturnType<typeof listAttendances>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListAttendancesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAttendances>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAttendancesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAttendances>>> = ({
		signal,
	}) => listAttendances(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listAttendances>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAttendancesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAttendances>>
>;
export type ListAttendancesQueryError = ErrorType<ApiError>;

export function useListAttendances<
	TData = Awaited<ReturnType<typeof listAttendances>>,
	TError = ErrorType<ApiError>,
>(
	params: undefined | ListAttendancesParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAttendances>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAttendances>>,
					TError,
					Awaited<ReturnType<typeof listAttendances>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAttendances<
	TData = Awaited<ReturnType<typeof listAttendances>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListAttendancesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAttendances>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAttendances>>,
					TError,
					Awaited<ReturnType<typeof listAttendances>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAttendances<
	TData = Awaited<ReturnType<typeof listAttendances>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListAttendancesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAttendances>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Attendances
 */

export function useListAttendances<
	TData = Awaited<ReturnType<typeof listAttendances>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListAttendancesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof listAttendances>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAttendancesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a attendance
 * @summary Update Attendance
 */
export const updateAttendance = (
	attendanceId: number,
	attendanceUpdate: BodyType<AttendanceUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<AttendanceResponse>(
		{
			url: `/records/attendances/${attendanceId}`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: attendanceUpdate,
		},
		options,
	);
};

export const getUpdateAttendanceMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateAttendance>>,
		TError,
		{ attendanceId: number; data: BodyType<AttendanceUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateAttendance>>,
	TError,
	{ attendanceId: number; data: BodyType<AttendanceUpdate> },
	TContext
> => {
	const mutationKey = ["updateAttendance"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateAttendance>>,
		{ attendanceId: number; data: BodyType<AttendanceUpdate> }
	> = (props) => {
		const { attendanceId, data } = props ?? {};

		return updateAttendance(attendanceId, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateAttendanceMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateAttendance>>
>;
export type UpdateAttendanceMutationBody = BodyType<AttendanceUpdate>;
export type UpdateAttendanceMutationError = ErrorType<ApiError>;

/**
 * @summary Update Attendance
 */
export const useUpdateAttendance = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateAttendance>>,
			TError,
			{ attendanceId: number; data: BodyType<AttendanceUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateAttendance>>,
	TError,
	{ attendanceId: number; data: BodyType<AttendanceUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateAttendanceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a attendance.
 * @summary Delete Attendance
 */
export const deleteAttendance = (
	attendanceId: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<Message>(
		{ url: `/records/attendances/${attendanceId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteAttendanceMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteAttendance>>,
		TError,
		{ attendanceId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteAttendance>>,
	TError,
	{ attendanceId: number },
	TContext
> => {
	const mutationKey = ["deleteAttendance"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteAttendance>>,
		{ attendanceId: number }
	> = (props) => {
		const { attendanceId } = props ?? {};

		return deleteAttendance(attendanceId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteAttendanceMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteAttendance>>
>;

export type DeleteAttendanceMutationError = ErrorType<ApiError>;

/**
 * @summary Delete Attendance
 */
export const useDeleteAttendance = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteAttendance>>,
			TError,
			{ attendanceId: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteAttendance>>,
	TError,
	{ attendanceId: number },
	TContext
> => {
	const mutationOptions = getDeleteAttendanceMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Returns absences between two dates.
Absences of inactive users or days off will not be shown.
 * @summary List Absences
 */
export const listAbsences = (
	params: ListAbsencesParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AbsenceResponse[]>(
		{ url: `/records/absences`, method: "GET", params, signal },
		options,
	);
};

export const getListAbsencesQueryKey = (params?: ListAbsencesParams) => {
	return [`/records/absences`, ...(params ? [params] : [])] as const;
};

export const getListAbsencesQueryOptions = <
	TData = Awaited<ReturnType<typeof listAbsences>>,
	TError = ErrorType<ApiError>,
>(
	params: ListAbsencesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAbsences>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListAbsencesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listAbsences>>> = ({
		signal,
	}) => listAbsences(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listAbsences>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListAbsencesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listAbsences>>
>;
export type ListAbsencesQueryError = ErrorType<ApiError>;

export function useListAbsences<
	TData = Awaited<ReturnType<typeof listAbsences>>,
	TError = ErrorType<ApiError>,
>(
	params: ListAbsencesParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAbsences>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAbsences>>,
					TError,
					Awaited<ReturnType<typeof listAbsences>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAbsences<
	TData = Awaited<ReturnType<typeof listAbsences>>,
	TError = ErrorType<ApiError>,
>(
	params: ListAbsencesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAbsences>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listAbsences>>,
					TError,
					Awaited<ReturnType<typeof listAbsences>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListAbsences<
	TData = Awaited<ReturnType<typeof listAbsences>>,
	TError = ErrorType<ApiError>,
>(
	params: ListAbsencesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAbsences>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Absences
 */

export function useListAbsences<
	TData = Awaited<ReturnType<typeof listAbsences>>,
	TError = ErrorType<ApiError>,
>(
	params: ListAbsencesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listAbsences>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListAbsencesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
