/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../customInstance";

import { customInstance } from "../customInstance";
import type {
	ApiError,
	GetCurrentShiftParams,
	ListShiftsParams,
	Message,
	PageShiftResponse,
	ShiftCreate,
	ShiftResponse,
	ShiftUpdate,
	UserCurrentShiftResponse,
} from "./api.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create new shift
 * @summary Create New Shift
 */
export const createNewShift = (
	shiftCreate: BodyType<ShiftCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<ShiftResponse>(
		{
			url: `/shifts/`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: shiftCreate,
			signal,
		},
		options,
	);
};

export const getCreateNewShiftMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createNewShift>>,
		TError,
		{ data: BodyType<ShiftCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createNewShift>>,
	TError,
	{ data: BodyType<ShiftCreate> },
	TContext
> => {
	const mutationKey = ["createNewShift"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createNewShift>>,
		{ data: BodyType<ShiftCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createNewShift(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateNewShiftMutationResult = NonNullable<
	Awaited<ReturnType<typeof createNewShift>>
>;
export type CreateNewShiftMutationBody = BodyType<ShiftCreate>;
export type CreateNewShiftMutationError = ErrorType<ApiError>;

/**
 * @summary Create New Shift
 */
export const useCreateNewShift = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createNewShift>>,
			TError,
			{ data: BodyType<ShiftCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createNewShift>>,
	TError,
	{ data: BodyType<ShiftCreate> },
	TContext
> => {
	const mutationOptions = getCreateNewShiftMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get all shifts. Can be filtered by user id.
Inactive user shifts will not be shown.
 * @summary List Shifts
 */
export const listShifts = (
	params?: ListShiftsParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PageShiftResponse>(
		{ url: `/shifts/`, method: "GET", params, signal },
		options,
	);
};

export const getListShiftsQueryKey = (params?: ListShiftsParams) => {
	return [`/shifts/`, ...(params ? [params] : [])] as const;
};

export const getListShiftsQueryOptions = <
	TData = Awaited<ReturnType<typeof listShifts>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListShiftsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listShifts>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListShiftsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listShifts>>> = ({
		signal,
	}) => listShifts(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listShifts>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListShiftsQueryResult = NonNullable<
	Awaited<ReturnType<typeof listShifts>>
>;
export type ListShiftsQueryError = ErrorType<ApiError>;

export function useListShifts<
	TData = Awaited<ReturnType<typeof listShifts>>,
	TError = ErrorType<ApiError>,
>(
	params: undefined | ListShiftsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listShifts>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listShifts>>,
					TError,
					Awaited<ReturnType<typeof listShifts>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListShifts<
	TData = Awaited<ReturnType<typeof listShifts>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListShiftsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listShifts>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listShifts>>,
					TError,
					Awaited<ReturnType<typeof listShifts>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListShifts<
	TData = Awaited<ReturnType<typeof listShifts>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListShiftsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listShifts>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Shifts
 */

export function useListShifts<
	TData = Awaited<ReturnType<typeof listShifts>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListShiftsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listShifts>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListShiftsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a shift
 * @summary Update Shift
 */
export const updateShift = (
	shiftId: number,
	shiftUpdate: BodyType<ShiftUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<ShiftResponse>(
		{
			url: `/shifts/${shiftId}`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: shiftUpdate,
		},
		options,
	);
};

export const getUpdateShiftMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateShift>>,
		TError,
		{ shiftId: number; data: BodyType<ShiftUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateShift>>,
	TError,
	{ shiftId: number; data: BodyType<ShiftUpdate> },
	TContext
> => {
	const mutationKey = ["updateShift"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateShift>>,
		{ shiftId: number; data: BodyType<ShiftUpdate> }
	> = (props) => {
		const { shiftId, data } = props ?? {};

		return updateShift(shiftId, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateShiftMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateShift>>
>;
export type UpdateShiftMutationBody = BodyType<ShiftUpdate>;
export type UpdateShiftMutationError = ErrorType<ApiError>;

/**
 * @summary Update Shift
 */
export const useUpdateShift = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateShift>>,
			TError,
			{ shiftId: number; data: BodyType<ShiftUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateShift>>,
	TError,
	{ shiftId: number; data: BodyType<ShiftUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateShiftMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a shift.
 * @summary Delete Shift
 */
export const deleteShift = (
	shiftId: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<Message>(
		{ url: `/shifts/${shiftId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteShiftMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteShift>>,
		TError,
		{ shiftId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteShift>>,
	TError,
	{ shiftId: number },
	TContext
> => {
	const mutationKey = ["deleteShift"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteShift>>,
		{ shiftId: number }
	> = (props) => {
		const { shiftId } = props ?? {};

		return deleteShift(shiftId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteShiftMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteShift>>
>;

export type DeleteShiftMutationError = ErrorType<ApiError>;

/**
 * @summary Delete Shift
 */
export const useDeleteShift = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteShift>>,
			TError,
			{ shiftId: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteShift>>,
	TError,
	{ shiftId: number },
	TContext
> => {
	const mutationOptions = getDeleteShiftMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get the current shift based on the current datetime
and the timezone information saved in AppConfig.
It may not return a shift if the user has no more shifts today
or if they are clocking out without clocking in.
 * @summary Get Current Shift
 */
export const getCurrentShift = (
	params: GetCurrentShiftParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<UserCurrentShiftResponse>(
		{ url: `/shifts/current`, method: "GET", params, signal },
		options,
	);
};

export const getGetCurrentShiftQueryKey = (params?: GetCurrentShiftParams) => {
	return [`/shifts/current`, ...(params ? [params] : [])] as const;
};

export const getGetCurrentShiftQueryOptions = <
	TData = Awaited<ReturnType<typeof getCurrentShift>>,
	TError = ErrorType<ApiError>,
>(
	params: GetCurrentShiftParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentShift>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetCurrentShiftQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentShift>>> = ({
		signal,
	}) => getCurrentShift(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCurrentShift>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentShiftQueryResult = NonNullable<
	Awaited<ReturnType<typeof getCurrentShift>>
>;
export type GetCurrentShiftQueryError = ErrorType<ApiError>;

export function useGetCurrentShift<
	TData = Awaited<ReturnType<typeof getCurrentShift>>,
	TError = ErrorType<ApiError>,
>(
	params: GetCurrentShiftParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentShift>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentShift>>,
					TError,
					Awaited<ReturnType<typeof getCurrentShift>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentShift<
	TData = Awaited<ReturnType<typeof getCurrentShift>>,
	TError = ErrorType<ApiError>,
>(
	params: GetCurrentShiftParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentShift>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getCurrentShift>>,
					TError,
					Awaited<ReturnType<typeof getCurrentShift>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentShift<
	TData = Awaited<ReturnType<typeof getCurrentShift>>,
	TError = ErrorType<ApiError>,
>(
	params: GetCurrentShiftParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentShift>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Current Shift
 */

export function useGetCurrentShift<
	TData = Awaited<ReturnType<typeof getCurrentShift>>,
	TError = ErrorType<ApiError>,
>(
	params: GetCurrentShiftParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getCurrentShift>>,
				TError,
				TData
			>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetCurrentShiftQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
