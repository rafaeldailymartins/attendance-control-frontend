/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { ErrorType } from "../customInstance";

import { customInstance } from "../customInstance";
import type { ApiError, GlobalConfig } from "./api.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get basic information about the application.
 * @summary Root
 */
export const root = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<GlobalConfig>(
		{ url: `/`, method: "GET", signal },
		options,
	);
};

export const getRootQueryKey = () => {
	return [`/`] as const;
};

export const getRootQueryOptions = <
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<ApiError>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRootQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof root>>> = ({
		signal,
	}) => root(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof root>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootQueryResult = NonNullable<Awaited<ReturnType<typeof root>>>;
export type RootQueryError = ErrorType<ApiError>;

export function useRoot<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<ApiError>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof root>>,
					TError,
					Awaited<ReturnType<typeof root>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRoot<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof root>>,
					TError,
					Awaited<ReturnType<typeof root>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRoot<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Root
 */

export function useRoot<
	TData = Awaited<ReturnType<typeof root>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getRootQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Checks if the application is running and healthy.
 * @summary Health Check
 */
export const healthCheck = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<boolean>(
		{ url: `/health`, method: "GET", signal },
		options,
	);
};

export const getHealthCheckQueryKey = () => {
	return [`/health`] as const;
};

export const getHealthCheckQueryOptions = <
	TData = Awaited<ReturnType<typeof healthCheck>>,
	TError = ErrorType<ApiError>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
		signal,
	}) => healthCheck(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof healthCheck>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthCheckQueryResult = NonNullable<
	Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckQueryError = ErrorType<ApiError>;

export function useHealthCheck<
	TData = Awaited<ReturnType<typeof healthCheck>>,
	TError = ErrorType<ApiError>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof healthCheck>>,
					TError,
					Awaited<ReturnType<typeof healthCheck>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
	TData = Awaited<ReturnType<typeof healthCheck>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof healthCheck>>,
					TError,
					Awaited<ReturnType<typeof healthCheck>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
	TData = Awaited<ReturnType<typeof healthCheck>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Health Check
 */

export function useHealthCheck<
	TData = Awaited<ReturnType<typeof healthCheck>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getHealthCheckQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
