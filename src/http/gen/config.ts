/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { BodyType, ErrorType } from "../customInstance";

import { customInstance } from "../customInstance";
import type {
	ApiError,
	AppConfigResponse,
	AppConfigUpdate,
	DayOffCreate,
	DayOffResponse,
	ListDaysOffParams,
	ListRolesParams,
	Message,
	PageDayOffResponse,
	PageRoleResponse,
	RoleCreate,
	RoleResponse,
	RoleUpdate,
	TimezoneResponse,
} from "./api.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create new role
 * @summary Create New Role
 */
export const createNewRole = (
	roleCreate: BodyType<RoleCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<RoleResponse>(
		{
			url: `/config/roles`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: roleCreate,
			signal,
		},
		options,
	);
};

export const getCreateNewRoleMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createNewRole>>,
		TError,
		{ data: BodyType<RoleCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createNewRole>>,
	TError,
	{ data: BodyType<RoleCreate> },
	TContext
> => {
	const mutationKey = ["createNewRole"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createNewRole>>,
		{ data: BodyType<RoleCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createNewRole(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateNewRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof createNewRole>>
>;
export type CreateNewRoleMutationBody = BodyType<RoleCreate>;
export type CreateNewRoleMutationError = ErrorType<ApiError>;

/**
 * @summary Create New Role
 */
export const useCreateNewRole = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createNewRole>>,
			TError,
			{ data: BodyType<RoleCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createNewRole>>,
	TError,
	{ data: BodyType<RoleCreate> },
	TContext
> => {
	const mutationOptions = getCreateNewRoleMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get all roles
 * @summary List Roles
 */
export const listRoles = (
	params?: ListRolesParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PageRoleResponse>(
		{ url: `/config/roles`, method: "GET", params, signal },
		options,
	);
};

export const getListRolesQueryKey = (params?: ListRolesParams) => {
	return [`/config/roles`, ...(params ? [params] : [])] as const;
};

export const getListRolesQueryOptions = <
	TData = Awaited<ReturnType<typeof listRoles>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listRoles>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListRolesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listRoles>>> = ({
		signal,
	}) => listRoles(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listRoles>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListRolesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listRoles>>
>;
export type ListRolesQueryError = ErrorType<ApiError>;

export function useListRoles<
	TData = Awaited<ReturnType<typeof listRoles>>,
	TError = ErrorType<ApiError>,
>(
	params: undefined | ListRolesParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listRoles>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listRoles>>,
					TError,
					Awaited<ReturnType<typeof listRoles>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListRoles<
	TData = Awaited<ReturnType<typeof listRoles>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listRoles>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listRoles>>,
					TError,
					Awaited<ReturnType<typeof listRoles>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListRoles<
	TData = Awaited<ReturnType<typeof listRoles>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listRoles>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Roles
 */

export function useListRoles<
	TData = Awaited<ReturnType<typeof listRoles>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listRoles>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListRolesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update a role
 * @summary Update Role
 */
export const updateRole = (
	roleId: number,
	roleUpdate: BodyType<RoleUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<RoleResponse>(
		{
			url: `/config/roles/${roleId}`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: roleUpdate,
		},
		options,
	);
};

export const getUpdateRoleMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateRole>>,
		TError,
		{ roleId: number; data: BodyType<RoleUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateRole>>,
	TError,
	{ roleId: number; data: BodyType<RoleUpdate> },
	TContext
> => {
	const mutationKey = ["updateRole"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateRole>>,
		{ roleId: number; data: BodyType<RoleUpdate> }
	> = (props) => {
		const { roleId, data } = props ?? {};

		return updateRole(roleId, data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateRole>>
>;
export type UpdateRoleMutationBody = BodyType<RoleUpdate>;
export type UpdateRoleMutationError = ErrorType<ApiError>;

/**
 * @summary Update Role
 */
export const useUpdateRole = <TError = ErrorType<ApiError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateRole>>,
			TError,
			{ roleId: number; data: BodyType<RoleUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateRole>>,
	TError,
	{ roleId: number; data: BodyType<RoleUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateRoleMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a role.
 * @summary Delete Role
 */
export const deleteRole = (
	roleId: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<Message>(
		{ url: `/config/roles/${roleId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteRoleMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteRole>>,
		TError,
		{ roleId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteRole>>,
	TError,
	{ roleId: number },
	TContext
> => {
	const mutationKey = ["deleteRole"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteRole>>,
		{ roleId: number }
	> = (props) => {
		const { roleId } = props ?? {};

		return deleteRole(roleId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteRole>>
>;

export type DeleteRoleMutationError = ErrorType<ApiError>;

/**
 * @summary Delete Role
 */
export const useDeleteRole = <TError = ErrorType<ApiError>, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteRole>>,
			TError,
			{ roleId: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteRole>>,
	TError,
	{ roleId: number },
	TContext
> => {
	const mutationOptions = getDeleteRoleMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Create new day off
 * @summary Create New Day Off
 */
export const createNewDayOff = (
	dayOffCreate: BodyType<DayOffCreate>,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<DayOffResponse>(
		{
			url: `/config/days-off`,
			method: "POST",
			headers: { "Content-Type": "application/json" },
			data: dayOffCreate,
			signal,
		},
		options,
	);
};

export const getCreateNewDayOffMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createNewDayOff>>,
		TError,
		{ data: BodyType<DayOffCreate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createNewDayOff>>,
	TError,
	{ data: BodyType<DayOffCreate> },
	TContext
> => {
	const mutationKey = ["createNewDayOff"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createNewDayOff>>,
		{ data: BodyType<DayOffCreate> }
	> = (props) => {
		const { data } = props ?? {};

		return createNewDayOff(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateNewDayOffMutationResult = NonNullable<
	Awaited<ReturnType<typeof createNewDayOff>>
>;
export type CreateNewDayOffMutationBody = BodyType<DayOffCreate>;
export type CreateNewDayOffMutationError = ErrorType<ApiError>;

/**
 * @summary Create New Day Off
 */
export const useCreateNewDayOff = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof createNewDayOff>>,
			TError,
			{ data: BodyType<DayOffCreate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof createNewDayOff>>,
	TError,
	{ data: BodyType<DayOffCreate> },
	TContext
> => {
	const mutationOptions = getCreateNewDayOffMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get all days off
 * @summary List Days Off
 */
export const listDaysOff = (
	params?: ListDaysOffParams,
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<PageDayOffResponse>(
		{ url: `/config/days-off`, method: "GET", params, signal },
		options,
	);
};

export const getListDaysOffQueryKey = (params?: ListDaysOffParams) => {
	return [`/config/days-off`, ...(params ? [params] : [])] as const;
};

export const getListDaysOffQueryOptions = <
	TData = Awaited<ReturnType<typeof listDaysOff>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListDaysOffParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listDaysOff>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListDaysOffQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listDaysOff>>> = ({
		signal,
	}) => listDaysOff(params, requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listDaysOff>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDaysOffQueryResult = NonNullable<
	Awaited<ReturnType<typeof listDaysOff>>
>;
export type ListDaysOffQueryError = ErrorType<ApiError>;

export function useListDaysOff<
	TData = Awaited<ReturnType<typeof listDaysOff>>,
	TError = ErrorType<ApiError>,
>(
	params: undefined | ListDaysOffParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listDaysOff>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listDaysOff>>,
					TError,
					Awaited<ReturnType<typeof listDaysOff>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDaysOff<
	TData = Awaited<ReturnType<typeof listDaysOff>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListDaysOffParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listDaysOff>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listDaysOff>>,
					TError,
					Awaited<ReturnType<typeof listDaysOff>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDaysOff<
	TData = Awaited<ReturnType<typeof listDaysOff>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListDaysOffParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listDaysOff>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Days Off
 */

export function useListDaysOff<
	TData = Awaited<ReturnType<typeof listDaysOff>>,
	TError = ErrorType<ApiError>,
>(
	params?: ListDaysOffParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listDaysOff>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListDaysOffQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Get settings
 * @summary Get App Config
 */
export const getAppConfig = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<AppConfigResponse>(
		{ url: `/config/`, method: "GET", signal },
		options,
	);
};

export const getGetAppConfigQueryKey = () => {
	return [`/config/`] as const;
};

export const getGetAppConfigQueryOptions = <
	TData = Awaited<ReturnType<typeof getAppConfig>>,
	TError = ErrorType<ApiError>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getAppConfig>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAppConfigQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppConfig>>> = ({
		signal,
	}) => getAppConfig(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAppConfig>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAppConfigQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAppConfig>>
>;
export type GetAppConfigQueryError = ErrorType<ApiError>;

export function useGetAppConfig<
	TData = Awaited<ReturnType<typeof getAppConfig>>,
	TError = ErrorType<ApiError>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppConfig>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppConfig>>,
					TError,
					Awaited<ReturnType<typeof getAppConfig>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppConfig<
	TData = Awaited<ReturnType<typeof getAppConfig>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppConfig>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppConfig>>,
					TError,
					Awaited<ReturnType<typeof getAppConfig>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppConfig<
	TData = Awaited<ReturnType<typeof getAppConfig>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppConfig>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get App Config
 */

export function useGetAppConfig<
	TData = Awaited<ReturnType<typeof getAppConfig>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppConfig>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetAppConfigQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Update settings
 * @summary Update App Config
 */
export const updateAppConfig = (
	appConfigUpdate: BodyType<AppConfigUpdate>,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<AppConfigResponse>(
		{
			url: `/config/`,
			method: "PATCH",
			headers: { "Content-Type": "application/json" },
			data: appConfigUpdate,
		},
		options,
	);
};

export const getUpdateAppConfigMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateAppConfig>>,
		TError,
		{ data: BodyType<AppConfigUpdate> },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateAppConfig>>,
	TError,
	{ data: BodyType<AppConfigUpdate> },
	TContext
> => {
	const mutationKey = ["updateAppConfig"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateAppConfig>>,
		{ data: BodyType<AppConfigUpdate> }
	> = (props) => {
		const { data } = props ?? {};

		return updateAppConfig(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type UpdateAppConfigMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateAppConfig>>
>;
export type UpdateAppConfigMutationBody = BodyType<AppConfigUpdate>;
export type UpdateAppConfigMutationError = ErrorType<ApiError>;

/**
 * @summary Update App Config
 */
export const useUpdateAppConfig = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof updateAppConfig>>,
			TError,
			{ data: BodyType<AppConfigUpdate> },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof updateAppConfig>>,
	TError,
	{ data: BodyType<AppConfigUpdate> },
	TContext
> => {
	const mutationOptions = getUpdateAppConfigMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a day off.
 * @summary Delete Day Off
 */
export const deleteDayOff = (
	dayOffId: number,
	options?: SecondParameter<typeof customInstance>,
) => {
	return customInstance<Message>(
		{ url: `/config/days-off/${dayOffId}`, method: "DELETE" },
		options,
	);
};

export const getDeleteDayOffMutationOptions = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteDayOff>>,
		TError,
		{ dayOffId: number },
		TContext
	>;
	request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteDayOff>>,
	TError,
	{ dayOffId: number },
	TContext
> => {
	const mutationKey = ["deleteDayOff"];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteDayOff>>,
		{ dayOffId: number }
	> = (props) => {
		const { dayOffId } = props ?? {};

		return deleteDayOff(dayOffId, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteDayOffMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteDayOff>>
>;

export type DeleteDayOffMutationError = ErrorType<ApiError>;

/**
 * @summary Delete Day Off
 */
export const useDeleteDayOff = <
	TError = ErrorType<ApiError>,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteDayOff>>,
			TError,
			{ dayOffId: number },
			TContext
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteDayOff>>,
	TError,
	{ dayOffId: number },
	TContext
> => {
	const mutationOptions = getDeleteDayOffMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
/**
 * Get all timezones
 * @summary List Timezones
 */
export const listTimezones = (
	options?: SecondParameter<typeof customInstance>,
	signal?: AbortSignal,
) => {
	return customInstance<TimezoneResponse[]>(
		{ url: `/config/timezones`, method: "GET", signal },
		options,
	);
};

export const getListTimezonesQueryKey = () => {
	return [`/config/timezones`] as const;
};

export const getListTimezonesQueryOptions = <
	TData = Awaited<ReturnType<typeof listTimezones>>,
	TError = ErrorType<ApiError>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof listTimezones>>, TError, TData>
	>;
	request?: SecondParameter<typeof customInstance>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getListTimezonesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof listTimezones>>> = ({
		signal,
	}) => listTimezones(requestOptions, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof listTimezones>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTimezonesQueryResult = NonNullable<
	Awaited<ReturnType<typeof listTimezones>>
>;
export type ListTimezonesQueryError = ErrorType<ApiError>;

export function useListTimezones<
	TData = Awaited<ReturnType<typeof listTimezones>>,
	TError = ErrorType<ApiError>,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listTimezones>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof listTimezones>>,
					TError,
					Awaited<ReturnType<typeof listTimezones>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTimezones<
	TData = Awaited<ReturnType<typeof listTimezones>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listTimezones>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof listTimezones>>,
					TError,
					Awaited<ReturnType<typeof listTimezones>>
				>,
				"initialData"
			>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTimezones<
	TData = Awaited<ReturnType<typeof listTimezones>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listTimezones>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Timezones
 */

export function useListTimezones<
	TData = Awaited<ReturnType<typeof listTimezones>>,
	TError = ErrorType<ApiError>,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof listTimezones>>, TError, TData>
		>;
		request?: SecondParameter<typeof customInstance>;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getListTimezonesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
