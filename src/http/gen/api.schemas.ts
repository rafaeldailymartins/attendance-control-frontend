/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Attendance Control API
 * OpenAPI spec version: 0.1.0
 */
/**
 * The minutes the user was late clocking in or out. If the value is different from null, the presence was recorded, but late.
 */
export type AbsenceResponseMinutesLate = number | null;

/**
 * The time the attendance was recorded. If the value is different from null, the presence was recorded, but late.
 */
export type AbsenceResponseAttendanceTimestamp = string | null;

export interface AbsenceResponse {
	/** The ID corresponding to the absence's shift. */
	shiftId: number;
	/** The date that attendance should have been recorded. */
	day: string;
	/** The type of absence. It can be 0 for clock in, or 1 for clock out. */
	absenceType: AttendanceType;
	/** The minutes the user was late clocking in or out. If the value is different from null, the presence was recorded, but late. */
	minutesLate?: AbsenceResponseMinutesLate;
	/** The time the attendance was recorded. If the value is different from null, the presence was recorded, but late. */
	attendanceTimestamp?: AbsenceResponseAttendanceTimestamp;
}

export interface ApiError {
	detail: ApiErrorDetail;
}

export interface ApiErrorDetail {
	message: string;
	metadata?: unknown;
}

export interface AppConfigResponse {
	/** Number of minutes of tolerance to record the clock-in. If the attendance time minus the start of the shift is greater than this number, an absence will be recorded. */
	minutesLate: number;
	/** Number of minutes of tolerance to record the clock-out. If the end of the shift minus the attendance time is greater than this number, an absence will be recorded. */
	minutesEarly: number;
	/** IANA time zone string used as the system's default time zone. */
	zoneInfo: string;
	/** The app config id */
	id: number;
}

/**
 * Number of minutes of tolerance to record the clock-in. If the attendance time minus the start of the shift is greater than this number, an absence will be recorded.
 */
export type AppConfigUpdateMinutesLate = number | null;

/**
 * Number of minutes of tolerance to record the clock-out. If the end of the shift minus the attendance time is greater than this number, an absence will be recorded.
 */
export type AppConfigUpdateMinutesEarly = number | null;

/**
 * IANA time zone string used as the system's default time zone.
 */
export type AppConfigUpdateZoneInfo = string | null;

export interface AppConfigUpdate {
	/** Number of minutes of tolerance to record the clock-in. If the attendance time minus the start of the shift is greater than this number, an absence will be recorded. */
	minutesLate?: AppConfigUpdateMinutesLate;
	/** Number of minutes of tolerance to record the clock-out. If the end of the shift minus the attendance time is greater than this number, an absence will be recorded. */
	minutesEarly?: AppConfigUpdateMinutesEarly;
	/** IANA time zone string used as the system's default time zone. */
	zoneInfo?: AppConfigUpdateZoneInfo;
}

export interface AttendanceCreate {
	/** The type of attendance. It can be 0 for clock in, or 1 for clock out. */
	attendanceType: AttendanceType;
	/** The ID corresponding to the attendance's shift. */
	shiftId: number;
}

export interface AttendanceResponse {
	/** The type of attendance. It can be 0 for clock in, or 1 for clock out. */
	attendanceType: AttendanceType;
	/** The ID corresponding to the attendance's shift. */
	shiftId: number;
	/** The attendance id. */
	id: number;
	/** The datetime of the attendance. */
	timestamp: string;
	/** The minutes the user was late clocking in or out. If it's less than the AppConfig setting (mintues_late for clock in and minutes_early for clock out), the value is saved as 0. */
	minutesLate: number;
}

export type AttendanceType =
	(typeof AttendanceType)[keyof typeof AttendanceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttendanceType = {
	NUMBER_0: 0,
	NUMBER_1: 1,
} as const;

/**
 * The type of attendance. It can be 0 for clock in, or 1 for clock out.
 */
export type AttendanceUpdateAttendanceType = AttendanceType | null;

/**
 * The ID corresponding to the attendance's shift.
 */
export type AttendanceUpdateShiftId = number | null;

/**
 * The datetime of the attendance.
 */
export type AttendanceUpdateTimestamp = string | null;

/**
 * The minutes the user was late clocking in or out. If it's less than the AppConfig setting (mintues_late for clock in and minutes_early for clock out), the value is saved as 0.
 */
export type AttendanceUpdateMinutesLate = number | null;

export interface AttendanceUpdate {
	/** The type of attendance. It can be 0 for clock in, or 1 for clock out. */
	attendanceType?: AttendanceUpdateAttendanceType;
	/** The ID corresponding to the attendance's shift. */
	shiftId?: AttendanceUpdateShiftId;
	/** The datetime of the attendance. */
	timestamp?: AttendanceUpdateTimestamp;
	/** The minutes the user was late clocking in or out. If it's less than the AppConfig setting (mintues_late for clock in and minutes_early for clock out), the value is saved as 0. */
	minutesLate?: AttendanceUpdateMinutesLate;
}

export type BodyLoginUsersLoginPostGrantType = string | null;

export type BodyLoginUsersLoginPostClientId = string | null;

export type BodyLoginUsersLoginPostClientSecret = string | null;

export interface BodyLoginUsersLoginPost {
	grant_type?: BodyLoginUsersLoginPostGrantType;
	username: string;
	password: string;
	scope?: string;
	client_id?: BodyLoginUsersLoginPostClientId;
	client_secret?: BodyLoginUsersLoginPostClientSecret;
}

export interface DayOffCreate {
	/** The day off */
	day: string;
	/** The day off description */
	description: string;
}

export interface DayOffResponse {
	/** The day off */
	day: string;
	/** The day off description */
	description: string;
	/** The day off id */
	id: number;
}

/**
 * The URL to the Swagger UI documentation, if enabled.
 */
export type GlobalConfigDocsUrl = string | null;

/**
 * The URL to the ReDoc documentation, if enabled.
 */
export type GlobalConfigRedocUrl = string | null;

/**
 * The URL to the OpenAPI schema (JSON), if enabled.
 */
export type GlobalConfigOpenapiUrl = string | null;

export interface GlobalConfig {
	/** The title of the API. */
	title: string;
	/** The current version of the API. */
	version: string;
	/** A short description of the API. */
	description: string;
	/** The root path of the application. */
	rootPath: string;
	/** The URL to the Swagger UI documentation, if enabled. */
	docsUrl: GlobalConfigDocsUrl;
	/** The URL to the ReDoc documentation, if enabled. */
	redocUrl: GlobalConfigRedocUrl;
	/** The URL to the OpenAPI schema (JSON), if enabled. */
	openapiUrl: GlobalConfigOpenapiUrl;
}

export interface HTTPValidationError {
	detail?: ValidationError[];
}

export interface Message {
	message: string;
}

export interface PageAttendanceResponse {
	/** List of items on this Page */
	items: AttendanceResponse[];
	/** Number of total items */
	totalItems: number;
	/** Total number of pages */
	totalPages: number;
	/** Page number */
	currentPage: number;
	/** Number of items per page */
	currentPageSize: number;
}

export interface PageDayOffResponse {
	/** List of items on this Page */
	items: DayOffResponse[];
	/** Number of total items */
	totalItems: number;
	/** Total number of pages */
	totalPages: number;
	/** Page number */
	currentPage: number;
	/** Number of items per page */
	currentPageSize: number;
}

export interface PageRoleResponse {
	/** List of items on this Page */
	items: RoleResponse[];
	/** Number of total items */
	totalItems: number;
	/** Total number of pages */
	totalPages: number;
	/** Page number */
	currentPage: number;
	/** Number of items per page */
	currentPageSize: number;
}

export interface PageShiftResponse {
	/** List of items on this Page */
	items: ShiftResponse[];
	/** Number of total items */
	totalItems: number;
	/** Total number of pages */
	totalPages: number;
	/** Page number */
	currentPage: number;
	/** Number of items per page */
	currentPageSize: number;
}

export interface PageUserResponse {
	/** List of items on this Page */
	items: UserResponse[];
	/** Number of total items */
	totalItems: number;
	/** Total number of pages */
	totalPages: number;
	/** Page number */
	currentPage: number;
	/** Number of items per page */
	currentPageSize: number;
}

export interface RoleCreate {
	/** The role name */
	name: string;
}

export interface RoleResponse {
	/** The role name */
	name: string;
	/** The role id */
	id: number;
}

/**
 * The role name
 */
export type RoleUpdateName = string | null;

export interface RoleUpdate {
	/** The role name */
	name?: RoleUpdateName;
}

export interface ShiftCreate {
	/** An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday). */
	weekday: WeekdayEnum;
	/** The start time of the shift. */
	startTime: string;
	/** The end time of the shift. */
	endTime: string;
	/** The ID corresponding to the shift's user. */
	userId: number;
}

export interface ShiftResponse {
	/** An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday). */
	weekday: WeekdayEnum;
	/** The start time of the shift. */
	startTime: string;
	/** The end time of the shift. */
	endTime: string;
	/** The shift id. */
	id: number;
	/** The ID corresponding to the shift's user. */
	userId: number;
}

/**
 * An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday).
 */
export type ShiftUpdateWeekday = WeekdayEnum | null;

/**
 * The start time of the shift.
 */
export type ShiftUpdateStartTime = string | null;

/**
 * The end time of the shift.
 */
export type ShiftUpdateEndTime = string | null;

/**
 * The ID corresponding to the shift's user.
 */
export type ShiftUpdateUserId = number | null;

export interface ShiftUpdate {
	/** An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday). */
	weekday?: ShiftUpdateWeekday;
	/** The start time of the shift. */
	startTime?: ShiftUpdateStartTime;
	/** The end time of the shift. */
	endTime?: ShiftUpdateEndTime;
	/** The ID corresponding to the shift's user. */
	userId?: ShiftUpdateUserId;
}

export interface TimezoneResponse {
	/** IANA time zone string used as the system's default time zone. */
	zoneInfo: string;
	/** UTC offset corresponding to the selected time zone, in the format ¬±HH:MM */
	offset: string;
}

export interface Token {
	/** A JWT token to be used in the `Authorization` header for authenticated requests. */
	accessToken: string;
	/** The type of the token returned. Must be used in the `Authorization` header along with `accessToken` for authenticated requests. */
	tokenType?: string;
}

/**
 * The ID corresponding to the user's role.
 */
export type UserCreateRoleId = number | null;

export interface UserCreate {
	/**
	 * The user's email, also used as the username when logging in.
	 * @maxLength 255
	 */
	email: string;
	/**
	 * The user's full name.
	 * @maxLength 255
	 */
	name: string;
	/** The ID corresponding to the user's role. */
	roleId?: UserCreateRoleId;
	/**
	 * The user's password. It must be between 8 and 50 characters long.
	 * @minLength 8
	 * @maxLength 50
	 */
	password: string;
	/** A list of UserShiftCreate schema, containing the user's shifts. */
	shifts: UserShiftCreate[];
}

/**
 * The user's current shift. It is null if the user has no more shifts or if their shift could not be found
 */
export type UserCurrentShiftResponseShift = ShiftResponse | null;

export interface UserCurrentShiftResponse {
	/** A message indicating whether the user's shift was returned. */
	message: string;
	/** The user's current shift. It is null if the user has no more shifts or if their shift could not be found */
	shift: UserCurrentShiftResponseShift;
}

/**
 * The ID corresponding to the user's role.
 */
export type UserResponseRoleId = number | null;

export interface UserResponse {
	/**
	 * The user's email, also used as the username when logging in.
	 * @maxLength 255
	 */
	email: string;
	/**
	 * The user's full name.
	 * @maxLength 255
	 */
	name: string;
	/** The ID corresponding to the user's role. */
	roleId?: UserResponseRoleId;
	/** The user id. */
	id: number;
	/** A list of UserShiftResponse schema, containing the user's shifts. */
	shifts: UserShiftResponse[];
	/** False if the user should be hidden when returning absences. */
	active: boolean;
}

export interface UserShiftCreate {
	/** An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday). */
	weekday: WeekdayEnum;
	/** The start time of the shift. */
	startTime: string;
	/** The end time of the shift. */
	endTime: string;
}

export interface UserShiftResponse {
	/** An integer representing the day of the week, starting with 0 (Monday) and ending with 6 (Sunday). */
	weekday: WeekdayEnum;
	/** The start time of the shift. */
	startTime: string;
	/** The end time of the shift. */
	endTime: string;
	/** The shift id. */
	id: number;
}

/**
 * The user's full name.
 */
export type UserUpdateName = string | null;

/**
 * The user's email, also used as the username when logging in.
 */
export type UserUpdateEmail = string | null;

/**
 * The user's password. It must be between 8 and 50 characters long.
 */
export type UserUpdatePassword = string | null;

/**
 * Indicates whether the user is active.
 */
export type UserUpdateActive = boolean | null;

/**
 * The ID corresponding to the user's role.
 */
export type UserUpdateRoleId = number | null;

/**
 * A list of UserShiftCreate schema, containing the user's shifts.
 */
export type UserUpdateShifts = UserShiftCreate[] | null;

export interface UserUpdate {
	/** The user's full name. */
	name?: UserUpdateName;
	/** The user's email, also used as the username when logging in. */
	email?: UserUpdateEmail;
	/** The user's password. It must be between 8 and 50 characters long. */
	password?: UserUpdatePassword;
	/** Indicates whether the user is active. */
	active?: UserUpdateActive;
	/** The ID corresponding to the user's role. */
	roleId?: UserUpdateRoleId;
	/** A list of UserShiftCreate schema, containing the user's shifts. */
	shifts?: UserUpdateShifts;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
	loc: ValidationErrorLocItem[];
	msg: string;
	type: string;
}

export type WeekdayEnum = (typeof WeekdayEnum)[keyof typeof WeekdayEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WeekdayEnum = {
	NUMBER_0: 0,
	NUMBER_1: 1,
	NUMBER_2: 2,
	NUMBER_3: 3,
	NUMBER_4: 4,
	NUMBER_5: 5,
	NUMBER_6: 6,
} as const;

export type ListUsersParams = {
	/**
	 * @minimum 1
	 * @maximum 100
	 */
	pageSize?: number;
	/**
	 * @minimum 1
	 */
	page?: number;
};

export type ListRolesParams = {
	/**
	 * @minimum 1
	 * @maximum 100
	 */
	pageSize?: number;
	/**
	 * @minimum 1
	 */
	page?: number;
};

export type ListDaysOffParams = {
	/**
	 * Filter by start date
	 */
	start_date?: string | null;
	/**
	 * Filter by end date
	 */
	end_date?: string | null;
	/**
	 * @minimum 1
	 * @maximum 100
	 */
	pageSize?: number;
	/**
	 * @minimum 1
	 */
	page?: number;
};

export type ListShiftsParams = {
	user_id?: number | null;
	/**
	 * @minimum 1
	 * @maximum 100
	 */
	pageSize?: number;
	/**
	 * @minimum 1
	 */
	page?: number;
};

export type GetCurrentShiftParams = {
	user_id: number;
	/**
	 * The type of attendance. It can be 0 for clock in, or 1 for clock out.
	 */
	attendance_type: AttendanceType;
};

export type ListAttendancesParams = {
	/**
	 * Filter by user id.
	 */
	user_id?: number | null;
	/**
	 * Filter by attendance type. It can be 0 for clock in, or 1 for clock out.
	 */
	attendance_type?: AttendanceType | null;
	/**
	 * Filter by a start datetime
	 */
	start_timestamp?: string | null;
	/**
	 * Filter by a end datetime
	 */
	end_timestamp?: string | null;
	/**
	 * @minimum 1
	 * @maximum 100
	 */
	pageSize?: number;
	/**
	 * @minimum 1
	 */
	page?: number;
};

export type ListAbsencesParams = {
	/**
	 * The initial date that will be used to search for absences
	 */
	start_date: string;
	/**
	 * The final date that will be used to search for absences
	 */
	end_date: string;
	/**
	 * Filter by user id.
	 */
	user_id?: number | null;
	/**
	 * Filter by absence type. It can be 0 for clock in, or 1 for clock out.
	 */
	absence_type?: AttendanceType | null;
};
